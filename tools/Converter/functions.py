import os, json


def generate_room_command(name: str, origin: str, final: str, particles: bool):
    origin = origin.strip().split(" ")
    final = final.strip().split(" ")

    delta = [0, 0, 0]
    delta[0] = int(final[0]) - int(origin[0])
    delta[1] = int(final[1]) - int(origin[1])
    delta[2] = int(final[2]) - int(origin[2])

    parent_dir = os.getcwd()

    if not os.path.isdir(os.path.join(parent_dir, "result")):
        os.mkdir(os.path.join(parent_dir, "result"))

    if not os.path.isdir(os.path.join(parent_dir, "result", "fill")):
        os.mkdir(os.path.join(parent_dir, "result", "fill"))

    f = open(f"result/fill/{name}.mcfunction", "w")
    f.write("# Fill command generated by a tool\n")
    f.write(f"execute as @e[tag={name}] at @s run fill ^ ^ ^ ^{delta[0]} ^{delta[1]} ^{delta[2]} air")
    f.close()

    if particles:
        if not os.path.isdir(os.path.join(parent_dir, "result", "particles")):
            os.mkdir(os.path.join(parent_dir, "result", "particles"))

        f = open(f"result/particles/{name}.mcfunction", "w")
        f.write("# Particle command generated by a tool\n")
        f.write(f"execute as @e[tag={name}] at @s run particle dust 0.0 1.0 1.0 1.0 ^ ^ ^ 0 0 0 0.0 1 normal")
        f.write("\n")
        f.write(
            f"execute as @e[tag={name}] at @s run particle dust 0.0 1.0 1.0 1.0 ^{delta[0]} ^{delta[1]} ^{delta[2]} 0 0 0 0.0 1 normal")
        f.close()


def convert_lt_to_crafting(lt_name: str, name: str, category: str):
    base_crafting_json = {
        "type": "crafting_shaped",
        "category": category,
        "pattern": ["...", "...", "..."],
        "key": {
            ".": {
                "item": "minecraft:stick"
            }
        },
        "result": {}
    }

    f = open(lt_name)
    lt_raw = json.loads(f.read())
    f.close()

    result_item_from_lt = lt_raw["pools"][0]["entries"][0]

    final_item = {
        "id": "",
        "count": 1,
        "components": {}
    }

    final_item["id"] = result_item_from_lt["name"]
    for i in result_item_from_lt["functions"]:
        match i["function"]:
            case "minecraft:set_name":
                final_item["components"]["minecraft:custom_name"] = json.dumps(i["name"])
            case "minecraft:set_lore":
                list = []
                for l in i["lore"]:
                    list.append(json.dumps(l))
                final_item["components"]["minecraft:lore"] = list
            case "minecraft:set_custom_data":
                final_item["components"]["minecraft:custom_data"] = {}
                data = i["tag"].lstrip("{").rstrip("}").split(",")
                for tag in data:
                    tag = tag.strip().split(":")
                    final_item["components"]["minecraft:custom_data"][tag[0]] = int(tag[1])
            case "minecraft:set_components":
                for n in i["components"].keys():
                    final_item["components"][n] = i["components"][n]

    base_crafting_json["result"] = final_item

    parent_dir = os.getcwd()

    if not os.path.isdir(os.path.join(parent_dir, "result")):
        os.mkdir(os.path.join(parent_dir, "result"))

    if not os.path.isdir(os.path.join(parent_dir, "result", "crafting")):
        os.mkdir(os.path.join(parent_dir, "result", "crafting"))

    f = open(f"result/crafting/{name}.json", "w")
    f.write(json.dumps(base_crafting_json))
    f.close()


def convert_lt_to_trading(lt_name_1: str,
                          lt_name_2: str,
                          amount_1: int,
                          amount_2: int,
                          lt_result: str,
                          amount_result: int,
                          reward_exp: bool,
                          limit: int,
                          trade_name: str,
                          tag : str,
                          noAI : bool):
    buy = get_file_from_lt(lt_name_1)
    buyB = get_file_from_lt(lt_name_2)
    sell = get_file_from_lt(lt_result)

    command = "/summon minecraft:villager ~ ~ ~ {VillagerData:{level:99}, Xp:1,"

    if noAI:
        command += f'NoAI:{int(noAI)}b,'

    command += f' Tags:["{tag}"],' + "Offers:{Recipes:[{"

    if reward_exp:
        command += f'rewardExp: {int(reward_exp)}b, '

    if limit != 0:
        command += f'maxUses: {limit}, '

    command += "buy:{id:" + f'"{buy["id"]}", count:{amount_1}, components:{buy["components"]}'

    if lt_name_2 != "":
        command += "}, buyB:{id:" + f'"{buyB["id"]}", count:{amount_2}, components:{buyB["components"]}'

    command += "}, sell:{id:" + f'"{sell["id"]}", count:{amount_result}, components:{sell["components"]}' + "}}]}}"

    parent_dir = os.getcwd()

    if not os.path.isdir(os.path.join(parent_dir, "result")):
        os.mkdir(os.path.join(parent_dir, "result"))

    if not os.path.isdir(os.path.join(parent_dir, "result", "trading")):
        os.mkdir(os.path.join(parent_dir, "result", "trading"))

    f = open(f"result/trading/{trade_name}.json", "w")
    f.write(command)
    f.close()


def get_file_from_lt(lt_name: str) -> dict:
    f = open(lt_name)
    lt_raw = json.loads(f.read())
    f.close()

    result_item_from_lt = lt_raw["pools"][0]["entries"][0]

    final_item = {
        "id": "",
        "count": 1,
        "components": {}
    }

    final_item["id"] = result_item_from_lt["name"]
    for i in result_item_from_lt["functions"]:
        match i["function"]:
            case "minecraft:set_name":
                final_item["components"]["minecraft:custom_name"] = json.dumps(i["name"])
            case "minecraft:set_lore":
                list = []
                for l in i["lore"]:
                    list.append(json.dumps(l))
                final_item["components"]["minecraft:lore"] = list
            case "minecraft:set_custom_data":
                final_item["components"]["minecraft:custom_data"] = {}
                data = i["tag"].lstrip("{").rstrip("}").split(",")
                for tag in data:
                    tag = tag.strip().split(":")
                    final_item["components"]["minecraft:custom_data"][tag[0]] = tag[1][1:3]
            case "minecraft:set_components":
                for n in i["components"].keys():
                    final_item["components"][n] = i["components"][n]

    return final_item
